#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\begin_preamble
\clubpenalty = 10000 
\widowpenalty = 10000 
\displaywidowpenalty = 10000
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language ngerman
\language_package default
\inputencoding auto
\fontencoding global
\font_roman Cambria
\font_sans Calibri
\font_typewriter Consolas
\font_default_family default
\use_non_tex_fonts true
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 90

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement H
\paperfontsize default
\spacing other 1.2
\use_hyperref true
\pdf_title "Entwicklung auf Windows Phone 7"
\pdf_author "Martin Rauscher"
\pdf_keywords "Windows Phone 7, WP7, XAML, Silverlight, Microsoft"
\pdf_bookmarks true
\pdf_bookmarksnumbered true
\pdf_bookmarksopen true
\pdf_bookmarksopenlevel 2
\pdf_breaklinks true
\pdf_pdfborder true
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title

\size giant
Entwickeln für 
\noun on
Windows
\begin_inset space ~
\end_inset

Phone
\begin_inset space ~
\end_inset

7
\size default
\noun default

\begin_inset Newline newline
\end_inset


\size large
Am Beispiel einer 
\noun on
OpenStreetMap
\noun default
 Anwendung
\end_layout

\begin_layout Author
Martin Rauscher
\end_layout

\begin_layout Section
Einführung
\end_layout

\begin_layout Standard
Mit 
\noun on
Windows Phone 7
\noun default
 (WP7) hat Microsoft sein Betriebssystem für Mobilgeräte komplett überarbeitet,
 um der Herausforderung durch Android und iOS gewachsen zu sein.
 Mit diesem neuen Betriebssystem wird ein neues Entwicklungsmodell eingeführt,
 welches hauptsächlich auf Microsofts 
\noun on
Silverlight
\noun default
-Technologie basiert.
 
\end_layout

\begin_layout Standard
Im Rahmen dieser Arbeit soll WP7 - und die Entwicklung dafür - vorgestellt
 werden.
\end_layout

\begin_layout Subsection
Vorstellung der Beispielanwendung
\end_layout

\begin_layout Standard
Um die Konzepte der Entwicklung für WP7 zu testen, wurde eine Anwendung
 erstellt, die das Betrachten von Karten von 
\noun on
OpenStreetMap
\noun default
 (und anderen Anbietern) ermöglicht.
 Sie erlaubt die Steuerung durch die üblichen Multi-Touch-Gesten, das Suchen
 nach Orten und das Verwalten von Favoriten.
 Des Weiteren können Routen geplant werden.
\end_layout

\begin_layout Standard
Alle Beispiele in dieser Arbeit sind aus dem Quelltext dieser Anwendung.
 Für nähere Informationen zur 
\begin_inset Quotes eld
\end_inset

OpenStreetApp
\begin_inset Quotes erd
\end_inset

 wird auf 
\begin_inset CommandInset citation
LatexCommand cite
key "HS-Flo"

\end_inset

 verwiesen.
\end_layout

\begin_layout Subsection
Rahmen dieser Arbeit
\end_layout

\begin_layout Standard
Es gibt zwei Arten von WP7 Apps
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Für spezielle Microsoft Partner ist es auch noch möglich halb-native Anwendungen
 zu schreiben.
\end_layout

\end_inset

: Zum einen Apps auf Basis von Silverlight und zum anderen Apps auf Basis
 des XNA Frameworks - einer gekapselte DirectX-Schnittstelle, welche hauptsächli
ch für die Entwicklung von Spielen verwendet wird.
\end_layout

\begin_layout Standard
Diese Arbeit beschäftigt sich ausschließlich mit der Entwicklung von 
\noun on
Silverlight
\noun default
 Apps, da es nur in seltenen Fällen Sinn macht, mit XNA Nicht-Spiele zu
 entwickeln und das Entwicklungsmodell von XNA gänzlich anders ist.
\end_layout

\begin_layout Section

\noun on
Windows Phone 7
\end_layout

\begin_layout Standard

\noun on
Windows Phone 7
\noun default
 ist hinsichtlich der Benutzeroberfläche als auch der Anwendungsplattform
 eine vollständige Neuentwicklung.
 Der Kern des Betriebssystems hingegen ist eine veränderte Version von Windows
 EC 7.0, dem Nachfolger von Windows CE 6, worauf Windows Mobile 6.5 beruht.
\begin_inset CommandInset citation
LatexCommand cite
key "WinCE"

\end_inset


\end_layout

\begin_layout Standard
Gründe nicht auf das bestehende Windows Mobile aufzusetzen waren:
\end_layout

\begin_layout Itemize
UI-Konzept zu stark desktop-orientiert 
\end_layout

\begin_layout Itemize
Fehlende Multi-Touch Unterstützung
\end_layout

\begin_layout Itemize
Aufwendig, modernes Look-and-Feel zu erreichen
\end_layout

\begin_layout Standard
WP7 begegnet diesen Problemen mit einer starken Multi-Touch-Unterstützung
 in 
\noun on
Silverlight
\noun default
 und vordefinierten Kontrollelementen, welche es vereinfachen sollen moderne
 Anwendungen zu schreiben, die sich in das UI-Konzept einfügen.
\end_layout

\begin_layout Section

\noun on
Silverlight
\noun default
 und die
\begin_inset Newline newline
\end_inset


\noun on
Windows
\begin_inset space ~
\end_inset

Presentation
\begin_inset space ~
\end_inset

Foundation
\end_layout

\begin_layout Standard
Das .NET Framework auf WP7 Handys basiert auf dem - vom Desktop bekannten
 - 
\noun on
Silverlight
\noun default
, welches wiederum auf der 
\noun on
Windows Presentation Foundation
\noun default
 basiert.
 In den folgen Abschnitten soll kurz aufgezeigt werden, wie die beiden Framework
s entstanden sind und worin die groben Unterschiede bestehen.
\begin_inset CommandInset citation
LatexCommand cite
key "ScottSilver"

\end_inset


\end_layout

\begin_layout Subsection

\noun on
Windows
\begin_inset space ~
\end_inset

Presentation
\begin_inset space ~
\end_inset

Foundation (WPF)
\end_layout

\begin_layout Standard
Ende 2006 stellte Microsoft die finale Version 3.0 des .NET Framework vor.
 Mit diesem wurde die, bis dahin unter dem Codenamen Avalon entwickelte,
 
\noun on
Windows Presentation Foundation (WPF)
\noun default
 der Öffentlichkeit zugänglich gemacht.
 Microsoft hoffte, dass Entwickler, insbesondere für das nur zwei Monate
 später erscheinende Windows Vista, nun hauptsächlich mit .NET und WPF entwickeln
 würden.
 Bis heute ist allerdings die Akzeptanz von WPF im Consumerbereich eher
 gering.
\end_layout

\begin_layout Standard
Mit WPF führte Microsoft erstmals ein deklaratives Modell zur Gestaltung
 von Benutzeroberflächen ein.
 Dabei wird die GUI und die Datenbindungen mit einem auf XML basierenden
 Format beschrieben.
 Dies erhöht die Wartbarkeit und Wiederverwendbarkeit verglichen mit den
 bisher verwendeten, zum Teil riesigen, automatisch generierten Funktionen
 enorm.
\end_layout

\begin_layout Standard
Eine weitere große Neuerung ist die Abkehr von GDI für das GUI-Rendering.
 Mit WPF wird erstmals vollständig auf (hardwarebeschleunigtes) DirectX
 gesetzt.
 Das hat den Vorteil, dass komplexe Oberflächen gerendert, transformiert
 und mit Effekten versehen werden können, ohne dass die CPU zusätzlich belastet
 wird.
\end_layout

\begin_layout Subsection

\noun on
Silverlight 
\noun default
(WPF/E)
\end_layout

\begin_layout Standard
2007 stellte Microsoft 
\noun on
Silverlight
\noun default
 vor, welches plakativ gesprochen, eine stark reduzierte Version des .NET
 Frameworks und eine Untermenge
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Aufgrund von unterschiedlichen Releasezyklen fehlen der aktuellen WPF aber
 einige Klassen, die bereits in 
\noun on
Silverlight
\noun default
 enthalten sind.
 Diese wurden aber über ein Silverlight Toolkit nachgereicht.
\end_layout

\end_inset

 der WPF darstellt.
 
\end_layout

\begin_layout Standard
Auch wenn 
\noun on
Silverlight
\noun default
 oft als Konkurrenz zu Adobes Flash Player gesehen wird, wurde es hauptsächlich
 mit dem Ziel entwickelt, sogenannte Rich Internet Applications (RIAs) zu
 ermöglichen, welche hauptsächlich im Geschäftsbereich eine Rolle spielen.
 Der einzige Bereich in dem 
\noun on
Silverlight
\noun default
 momentan tatsächlich in direkter Konkurrenz zu Flash steht, ist die Videowieder
gabe.
 Sowohl 
\noun on
Smooth Streaming
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Bei Smooth Streaming handelt es sich um eine Technik die Videomaterial dynamisch
 neu kodiert, um sich der zur Verfügung stehenden Bandbreite anzupassen.
\end_layout

\end_inset


\noun default
 als auch hardwarebeschleunigte Videowiedergabe waren zuerst in 
\noun on
Silverlight
\noun default
 möglich.
 Deshalb hat Microsoft einige prominente Unterstützter gefunden: Unter anderem
 wurden die Olympischen Winterspiele 2008 und einige amerikanische Sportgroßerei
gnisse exklusiv via 
\noun on
Silverlight
\noun default
 gestreamt; des weiteren setzt auch das deutsche Videoportal 
\begin_inset Quotes eld
\end_inset

Maxdome
\begin_inset Quotes erd
\end_inset

 auf 
\noun on
Silverlight
\noun default
.
\end_layout

\begin_layout Standard

\noun on
Silverlight
\noun default
 wurde von Grund auf plattformunabhängig konzipiert.
 Microsoft stellt es für die meisten Windows Versionen sowie für Mac OS
 X zur Verfügung.
 Des Weiteren sind ein Großteil der Spezifikationen und einige Teile des
 Codes öffentlich zugänglich.
 Darauf aufbauend entwickelt das Mono Projekt unter Leitung von Novell eine
 Linux Portierung.
 
\begin_inset Quotes eld
\end_inset

Moonlight
\begin_inset Quotes erd
\end_inset

 ist momentan kompatibel mit 
\noun on
Silverlight
\noun default
 3.
\begin_inset CommandInset citation
LatexCommand cite
key "Moonlight"

\end_inset


\end_layout

\begin_layout Subsection
Unterschiede
\end_layout

\begin_layout Standard
Trotz der Ankündigung von Microsoft, die Unterschiede zwischen WPF und Silverlig
ht im Laufe der Zeit zu verringern, sind diese momentan noch stark sichtbar,
 da auf WP7 nur SL3 bzw.
 ab Herbst SL4 verfügbar ist
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
SL5 wird viele der aufgezählten Unterschiede ausgleichen.
\end_layout

\end_inset

.
 
\end_layout

\begin_layout Standard
Ein beliebtes Feature in WPF, zur Trennung von GUIs vom Verhalten, sind
 so genannte 
\emph on
Commands
\emph default
.
 Diese können an viele Elemente gebunden werden um bei Aktivierung des Elements
 eine bestimmte Aktion auszulösen und um zu signalisieren, ob diese Aktion
 im Moment möglich ist.
 Dieses Feature ist ab SL4 verfügbar.
\end_layout

\begin_layout Standard
Ein ebenfalls erst ab SL4 verfügbares Feature, sind 
\emph on
Markup Extensions
\emph default
.
 Auf dieses Thema wird noch genauer in Kapitel 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Markup-Extensions"

\end_inset

 eingegangen.
 
\end_layout

\begin_layout Standard
Die beiden größten Unterschied in der GUI-Entwicklung sind zum einen das
 Fehlen von Triggern, die z.B.
 Animation bei bestimmten Ereignissen auslösen können, und zum anderen,
 dass Styles grundsätzlich explizit gesetzt werden müssen und nicht automatisch
 aus den gegebenen Typen ermittelt werden können.
\end_layout

\begin_layout Standard
Diese Auflistung enthält nur die wichtigsten Unterschiede.
 Für eine detaillierte und vollständige Liste wird auf 
\begin_inset CommandInset citation
LatexCommand cite
key "SLvsWPF"

\end_inset

 verwiesen.
\end_layout

\begin_layout Section
Entwickeln mit 
\noun on
Silverlight
\end_layout

\begin_layout Subsection
Struktur einer 
\noun on
Silverlight
\noun default
 Anwendung
\end_layout

\begin_layout Standard
Eine 
\noun on
Silverlight
\noun default
 Anwendung wird immer in Form einer ZIP-Datei mit der Endung \SpecialChar \@.
XAP verteilt.
 In dieser Datei sind die vier Bestandteile einer App untergebracht: 
\end_layout

\begin_layout Itemize
Das Manifest (WMAppManifest.xml), welches die Fähigkeiten der App festlegt
\end_layout

\begin_layout Itemize
Das Anwendungsobjekt (App.cs und App.xaml), welches die zentrale Steuereinheit
 bildet
\end_layout

\begin_layout Itemize
Die verschiedenen 
\begin_inset Quotes eld
\end_inset

Seiten
\begin_inset Quotes erd
\end_inset

 der App als <PageName>.xaml Dateien
\end_layout

\begin_layout Itemize
Die Ressourcen (Bilder, Töne, etc.)
\end_layout

\begin_layout Standard
Beim Start der App durch das Betriebssystem lädt dieses das Manifest und
 registriert die darin vermerkten Fähigkeiten.
 Selbige beschränken z.B.
 den Zugriff auf den GPS-Sensor oder die Bilder des Nutzers und werden ihm
 vor der Installation der App angezeigt.
\end_layout

\begin_layout Standard
Danach wird das Programm initialisiert und die Startseite der App geladen,
 welche ebenfalls im Manifest vermerkt ist.
\end_layout

\begin_layout Standard
Ab diesem Zeitpunkt kann der Entwickler mit dem Navigationsservice zu anderen
 Seiten navigieren.
 Die Navigation sollte dabei immer linear sein, damit der Benutzer beim
 Drücken des - in jedem WP7 Gerät verbauten - Zurück-Knopfs keine unlogischen
 Sprünge verursacht.
\end_layout

\begin_layout Subsection
XAML
\end_layout

\begin_layout Standard
XAML ist eine deklarative Sprache zur Beschreibung von Datenstrukturen,
 die insbesondere für 
\noun on
Silverlight-
\noun default
 und WPF-Benutzeroberflächen verwendet wird.
 Sie ist ein XML Dialekt, der um verschiedene Konzepte erweitert wurde:
\end_layout

\begin_layout Subsubsection
Komplexe Attributdefinitionen
\end_layout

\begin_layout Standard
In XML können Attributen nur Strings, Zahlen und Referenzen zugewiesen werden,
 während der Inhalt von Element beliebig komplex sein kann.
 In XAML können Attribute durch eine simple Erweiterung der Semantik von
 Elementnamen ebenfalls mit beliebigem Code beschrieben werden.
 Im Beispiel 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:Beispiel-für-Komplexe"

\end_inset

 wird so auf das Attribut 
\family typewriter
Background
\family default
 über 
\family typewriter
Grid.Background
\family default
 zugegriffen.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset listings
lstparams "basicstyle={\ttfamily},language=XML,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

<Grid Background="Transparent"/>
\end_layout

\begin_layout Plain Layout

<!-- oder -->
\end_layout

\begin_layout Plain Layout

<Grid>
\end_layout

\begin_layout Plain Layout

	<Grid.Background>
\end_layout

\begin_layout Plain Layout

		<SolidColorBrush Color="Transparent"/>
\end_layout

\begin_layout Plain Layout

	</Grid.Background>
\end_layout

\begin_layout Plain Layout

</Grid>
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "alg:Beispiel-für-Komplexe"

\end_inset

Beispiel für Komplexe Attributdefinitionen
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Attached Properties
\end_layout

\begin_layout Standard
Insbesondere bei der Beschreibung von Benutzeroberflächen steht man oft
 vor dem Problem, dass Elemente eine Eigenschaft besitzen, die nur innerhalb
 eines bestimmten Kontextes sinnvoll sind.
 
\end_layout

\begin_layout Standard
Z.B.
 hat ein Button der in einem 
\emph on
Canvas
\emph default
 angeordnet ist eine X und eine Y Koordinate.
 Wird er aber außerhalb eines 
\emph on
Canvas
\emph default
 eingesetzt, sind diese Eigenschaften u.U.
 nicht sinnvoll.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset listings
lstparams "basicstyle={\ttfamily},language=XML,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

<Canvas>
\end_layout

\begin_layout Plain Layout

	<Button Canvas.Top="100">
\end_layout

\begin_layout Plain Layout

		<Canvas.Left>25</Canvas.Left>
\end_layout

\begin_layout Plain Layout

		<TextBlock Text="Ein Knopf"/>
\end_layout

\begin_layout Plain Layout

	</Button>
\end_layout

\begin_layout Plain Layout

</Canvas>
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "alg:Bsp-Attached-Property"

\end_inset

Beispiel für ein Attached Property
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
XAML bietet für dieses Problem eine einfache Lösung: Genau wie bei komplexen
 Attributdefinitionen wird hier der Name des Attributbesitzers verwendet
 um die Herkunft des Attributs zu qualifizieren.
 Der Wert des Attributs wird dabei in einer statischen Eigenschaft der entsprech
enden Klasse gespeichert.
 
\begin_inset CommandInset citation
LatexCommand cite
key "HS-WPF-SL"

\end_inset


\end_layout

\begin_layout Standard
Die sogenannten 
\emph on
Attached Properties
\emph default
 sind eine Spezialform von 
\emph on
Dependency Properties
\emph default
 (siehe 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Dependency-Properties"

\end_inset

).
\end_layout

\begin_layout Subsubsection
Markup Extensions
\begin_inset CommandInset label
LatexCommand label
name "sub:Markup-Extensions"

\end_inset


\end_layout

\begin_layout Standard

\emph on
Markup Extensions
\emph default
 sind ein Konzept, das es ermöglicht den XAML Parser in begrenztem Umfang
 zu erweitern, so dass die Verwendung von Code oder komplexen Attributdefinition
en entfallen kann.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset listings
lstparams "basicstyle={\ttfamily},language=XML,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

<TextBlock Text="{StaticResource AppName}" />
\end_layout

\begin_layout Plain Layout

<!-- oder -->
\end_layout

\begin_layout Plain Layout

<TextBlock Text="{StaticResource ResourceKey=AppName}" />
\end_layout

\begin_layout Plain Layout

<!-- vs.
 -->
\end_layout

\begin_layout Plain Layout

this.textblock.Text = (string)this.Resources["AppName"];
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "alg:Bsp-Markup-Extension"

\end_inset

Beispiel für eine Markup Extension
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard

\emph on
Markup Extensions
\emph default
 werden durch führende und endende geschweifte Klammern gekennzeichnet.
 Das erste Wort in den Klammern gibt die Klasse der zu verwendenden Extension
 an.
 Parameter werden nach dem Klassennamen gelistet und werden in der Form
 
\begin_inset Quotes eld
\end_inset

Parameter=Wert
\begin_inset Quotes erd
\end_inset

 angegeben.
 Einzige Ausnahme ist der Standardparameter, der ohne Angabe seines Namens
 verwendet werden kann.
 Im Beispiel 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:Bsp-Markup-Extension"

\end_inset

 ist der Standardparameter 
\begin_inset Quotes eld
\end_inset

ResourceKey
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
Bei jeder Verwendung wird eine neue Instanz der entsprechenden Klasse erzeugt,
 die Parameter als Eigenschaften gesetzt und eine Methode aufgerufen, die
 mit beliebigem Code einen Wert für das zu belegende Attribut erzeugt.
\end_layout

\begin_layout Standard

\noun on
Silverlight
\noun default
 bietet in der aktuellen Version keine Möglichkeit eigene 
\emph on
Markup Extensions
\emph default
 zu definieren
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Auch diese Funktion ist für SL5 angekündigt.
\end_layout

\end_inset

.
 Es stehen nur die folgenden Vordefinierten zur Verfügung: 
\emph on
Binding
\emph default
, 
\emph on
StaticResource
\emph default
 (und 
\emph on
DynamicResource
\emph default
).
 Auf deren Bedeutung wird im folgenden Abschnitt eingegangen; außerdem wird
 aufgezeigt, dass sie beliebig geschachtelt werden können.
\end_layout

\begin_layout Subsection
Datenbindung
\end_layout

\begin_layout Standard
Eine der größten Stärken von 
\noun on
Silverlight
\noun default
 ist die Möglichkeit, Eigenschaften von Elementen auf einfache Weise an
 Attribute von Datenobjekten oder an Eigenschaften anderer GUI Elemente
 zu binden.
 Somit muss kein Code geschrieben werden, um die Benutzeroberfläche bei
 Änderungen an den Daten aktuell zu halten.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset listings
lstparams "basicstyle={\ttfamily},showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

<TextBox Text="{Binding Path=Vorname, 
\end_layout

\begin_layout Plain Layout

						Mode=TwoWay, 
\end_layout

\begin_layout Plain Layout

						Converter={StaticResource conv1}}"/>
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "alg:Bsp-Binding"

\end_inset

Beispiel für eine Datenbindung
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In Beispiel 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:Bsp-Binding"

\end_inset

 kann man sehen, wie die Definition einer Datenbindung mit Hilfe der {
\emph on
Binding
\emph default
} Markup Extension aussieht.
 Dabei bezieht sich die Datenbindung auf den aktuellen Datenkontext, da
 keine andere Quelle angegeben wurde.
 Dieser Kontext ergibt sich aus dem Element innerhalb dessen das Binding
 definiert wurde.
 Jedes GUI-Element
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Genauer, jede von 
\noun on
FrameworkElement
\noun default
 erbende Klasse.
\end_layout

\end_inset

 hat eine 
\noun on
DataContext
\noun default
 Eigenschaft, die es an seine Kind-Elemente weitervererbt, von ihnen aber
 auch überschrieben werden kann.
\end_layout

\begin_layout Standard
Der 
\family typewriter
Mode
\family default
 Parameter im Beispiel beschreibt dabei die Richtung der Bindung.
 Es können beide Seiten den Wert ändern (
\family typewriter
TwoWay
\family default
) oder nur die Quelle (
\family typewriter
OneWay
\family default
) oder auch das Ziel (
\family typewriter
OneWayToSource
\family default
).
\end_layout

\begin_layout Subsubsection
Dependency Properties
\begin_inset CommandInset label
LatexCommand label
name "sub:Dependency-Properties"

\end_inset


\end_layout

\begin_layout Standard
Ein Problem vieler Datenbindungs-Ansätze ist, dass sie Reflection
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Reflection bezeichnet die Möglichkeit Objekte einer statisch getypten Sprache
 zur Laufzeit dynamisch zu untersuchen und zu verändern.
 Hierfür sind meistens aufwendige Aufrufe an die zu Grunde liegende Plattform
 zu richten.
\end_layout

\end_inset

 verwenden, da die Eigenschaften als String angegeben werden.
 Außerdem muss jede Klasse typischerweise ein Interface implementieren,
 das die eventuellen Ziele einer Datenbindung benachrichtigt.
 
\end_layout

\begin_layout Standard
In 
\noun on
Silverlight
\noun default
 wird dieses Problem mit so genannten Dependency Properties (DPs) gelöst.
 Im Grunde sind DPs Dictionaries, die als statische Eigenschaften in der
 Klasse definiert werden.
 Dieses weißt dann einer Instanz einen bestimmten Wert zu.
\end_layout

\begin_layout Standard
Der große Vorteil von DPs ist, dass sich beliebige Objekte registrieren
 können, um benachrichtigt zu werden, wenn sich der Wert einer Eigenschaft
 eines bestimmten Objekts ändert; und zwar mit statisch getypten Vorher-Nachher-
Werten.
\end_layout

\begin_layout Standard
Außerdem lassen sich bei der Definition von DPs Standardwerte festlegen
 und automatisches Vererben von Werten auf Kind-Objekte in der UI-Hierarchie
 aktivieren.
\end_layout

\begin_layout Subsubsection
Daten-Konverter
\end_layout

\begin_layout Standard
Es ist oft wünschenswert zwei Eigenschaften miteinander zu verbinden, die
 nicht den gleichen Datentyp haben.
 Das typische Beispiel hierfür ist die Text Eigenschaft eines Textblocks
 und ein Zahlwert eines Objekts.
 Im Gegensatz zu diesem einfachen Beispiel, bei welchem die Konvertierung
 natürlich automatisch passiert, ist es oft komplizierter.
 
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset listings
lstparams "basicstyle={\ttfamily},language={[Sharp]C},showstringspaces=false,tabsize=3"
inline false
status open

\begin_layout Plain Layout

public class VisibilityConverter : IValueConverter
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	public Object Convert(Object value, 
\end_layout

\begin_layout Plain Layout

						Type targetType, 
\end_layout

\begin_layout Plain Layout

						Object parameter, 
\end_layout

\begin_layout Plain Layout

						System.Globalization.CultureInfo culture)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		return (bool)value == true ? 
\end_layout

\begin_layout Plain Layout

				System.Windows.Visibility.Visible 
\end_layout

\begin_layout Plain Layout

				: System.Windows.Visibility.Collapsed;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	public Object ConvertBack(Object value, 
\end_layout

\begin_layout Plain Layout

							Type targetType, 
\end_layout

\begin_layout Plain Layout

							Object parameter,
\end_layout

\begin_layout Plain Layout

							System.Globalization.CultureInfo culture)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		return (System.Windows.Visibility)value 
\end_layout

\begin_layout Plain Layout

			== System.Windows.Visibility.Visible;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "alg:Bsp-Converter"

\end_inset

Beispiel für einen Converter
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Dieses Problem wird mit so genannte Konvertern, die beliebige Typen in einander
 umwandeln können, gelöst.
 Konverter sind Klassen, welche das 
\emph on
IValueConverter
\emph default
 Interface implementieren.
 Im Beispiel 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:Bsp-Converter"

\end_inset

 kann man exemplarisch sehen, wie ein Wahrheitswert in einen Aufzählungstyp
 - und umgekehrt - umgewandelt werden kann.
 Mit Hilfe der 
\emph on
Convert
\emph default
 und 
\emph on
ConvertBack
\emph default
 Methoden kann beliebig komplexer Code dazu verwendet werden Werte umzuwandeln.
 
\end_layout

\begin_layout Standard
In Beispiel 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:Bsp-Binding"

\end_inset

 wurde bereits gezeigt, wie Konverter verwendet werden.
 Üblicherweise müssen selbige dafür als eine Ressource definiert werden.
\end_layout

\begin_layout Subsubsection
Daten-Templates
\end_layout

\begin_layout Standard
Will man mehrere Objekte, z.B.
 in einer Liste, anzeigen, so reichen die Fähigkeiten von Konvertern normalerwei
se nicht aus.
 Für diese Anwendung bietet 
\noun on
Silverlight
\noun default
 Daten Templates an.
 Dies sind Schablonen mit deren Hilfe beliebige Objekte durch (mehrere)
 UI Komponenten angezeigt werden können.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset listings
lstparams "basicstyle={\ttfamily},showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

<DataTemplate>
\end_layout

\begin_layout Plain Layout

	<StackPanel>
\end_layout

\begin_layout Plain Layout

		<Image Source="{Binding Logo}"/>
\end_layout

\begin_layout Plain Layout

		<TextBlock Text="{Binding Text}"/>
\end_layout

\begin_layout Plain Layout

	</StackPanel>
\end_layout

\begin_layout Plain Layout

</DataTemplate>
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "alg:Bsp-DataTemplate"

\end_inset

Beispiel für ein Daten Template
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Wird das im Beispiel 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:Bsp-DataTemplate"

\end_inset

 definierte Template in einer ListBox verwendet, dessen ItemsSource auf
 eine Sammlung von passenden Objekten gesetzt ist, dann wird für jedes Objekt
 ein Daten-Container erstellt, dessen Inhalt durch das Template vorgegeben
 ist.
\end_layout

\begin_layout Standard
Wie im Beispiel bereits angedeutet, können diese Templates beliebig komplex
 sein.
 Der Kontext von Datenbindungen innerhalb dieser Templates, ist dabei das
 Objekt, für welches das Template instanziiert wurde.
\end_layout

\begin_layout Subsection
Ressourcen
\end_layout

\begin_layout Standard
In jedem Projekt tauchen Teile auf, die an vielen Stellen wieder verwendet
 werden, z.B.
 Bilder, Texte oder Vorlagen für bestimmte Stile.
 Ähnlich dem Konzept der Datenbindungen können in 
\noun on
Silverlight
\noun default
 Ressourcen einfach definiert und verwendet werden.
\end_layout

\begin_layout Standard
Jedes Steuerelement in 
\noun on
Silverlight
\noun default
 kann eine Liste von Ressourcen für sich und seine Kind-Elemente definieren.
 Außerdem können anwendungsweite Ressourcen definiert werden - siehe Beispiel
 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:Bsp-Resourcendefinition"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset listings
lstparams "basicstyle={\ttfamily},showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

<Application.Resources>
\end_layout

\begin_layout Plain Layout

	<System:String x:Key="AppTitle">
\end_layout

\begin_layout Plain Layout

		Open Street App
\end_layout

\begin_layout Plain Layout

	</System:String>
\end_layout

\begin_layout Plain Layout

</Application.Resources>
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "alg:Bsp-Resourcendefinition"

\end_inset

Beispiel Ressourcendefinition
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In Beispiel 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:Bsp-Binding"

\end_inset

 wurde bereits aufgezeigt, wie auf eine Ressource innerhalb einer Datenbindungs-
Definition verwiesen wird.
 Bei der Auflösung des Namens einer Ressource wird der Elementbaum von unten
 nach oben durchsucht, bis schlussendlich die anwendungsweiten Ressourcen
 verwendet werden.
\end_layout

\begin_layout Standard
In den bisherigen Beispielen erfolgte der Verweis auf eine Ressource immer
 mittels {
\emph on
StaticResource
\emph default
}.
 Wie bereits erwähnt existiert erwartungsgemäß auch eine {
\emph on
DynamicResource
\emph default
}, die aber erst mit SL4 verfügbar sein wird.
 Der Unterschied besteht im Ladeverhalten:
\end_layout

\begin_layout Standard
Statische Ressourcen werden nur einmal beim Initialisieren des Elements
 geladen.
 Sollte sich also das, worauf sich die Ressource bezieht, verändern, würde
 das die Bindung nicht widerspiegeln.
 Ein dynamischer Ressourcenverweis hingegen funktioniert genau wie eine
 Datenbindung.
\end_layout

\begin_layout Subsection
Besonderheiten auf dem Handy
\end_layout

\begin_layout Standard
Die Entwicklung auf Mobilgeräten unterliegt zum Teil gänzlich anderen Anforderun
gen, als die Entwicklung für den Desktopbereich.
 Diese Unterschiede sind größtenteils nicht WP7 spezifisch, müssen hier
 aber dennoch erwähnt werden, da WP7 einige individuelle Lösungsansätze
 bietet.
\end_layout

\begin_layout Subsubsection
Performance
\end_layout

\begin_layout Standard
Während auf 
\begin_inset Quotes eld
\end_inset

normalen
\begin_inset Quotes erd
\end_inset

 PCs sowohl Rechenleistung als auch Arbeitsspeicher im Überfluss vorhanden
 sind, müssen sich Entwickler im mobilen Bereich über diese Aspekte wieder
 Gedanken machen.
 Nur dann kann eine ausreichende Performance auf dem Gerät erzielt werden.
\end_layout

\begin_layout Standard
Dieses Ziel lässt sich auf zwei verschiedene Arten erreichen: Entweder schränkt
 man sich soweit ein, dass die Performance des Gerätes ausreicht oder man
 beeinflusst die wahrgenommene Performance.
 Letzteres beschreibt den Effekt, dass einem Anwender eine App die ihn warten
 lässt, bis alle Daten geladen sind, sehr viel langsamer erscheint, als
 eine App, die ihm während des Ladevorgangs zumindest schon einzelne Daten
 anzeigt.
 Und das obwohl diese meistens insgesamt sogar mehr Zeit benötigt als erstere.
 Um die wahrgenommene Performance zu verbessern, gibt es abhängig von der
 Situation verschiedene Möglichkeiten:
\end_layout

\begin_layout Standard
Wenn eine größere Datenmenge über eine langsame Handy-Verbindung übertragen
 werden soll, bietet es sich an, die Daten in kleinen Blöcken zu laden,
 und erst wenn der Benutzer an das Ende der Liste gescrollt hat, den Ladevorgang
 fortzusetzen.
\end_layout

\begin_layout Standard
Sobald sich die Daten im Speicher befinden steht man allerdings vor dem
 Problem, dass die Scroll-Performance stark leidet - besonders bei komplexen
 Daten-Templates.
 
\noun on
Silverlight
\noun default
 hat für dieses Problem bereits eine eingebaute Lösung - 
\begin_inset Quotes eld
\end_inset

UI Virtualisierung
\begin_inset Quotes erd
\end_inset

.
 Dabei werden die Daten-Container der Templates, die aus dem sichtbaren
 Bereich heraus-gescrollt wurden, wiederverwendet.
 Somit wird aufwendiges Zuweisen von neuem Speicher vermieden und es müssen
 nicht Container für alle Daten-Elemente erzeugt werden.
\end_layout

\begin_layout Standard
Falls diese Technik nicht ausreicht um ein flüssiges Scrollen zu ermöglichen,
 z.B.
 aufgrund zu komplexer Daten-Templates, existiert auch dafür eine Lösung.
 In einem erweiterten 
\emph on
ListBox
\emph default
 Steuerelement
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Das benötigte Steuerelement ist nicht Teil der Standardbibliothek und kann
 hier gefunden werden: 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://goo.gl/14H2U
\end_layout

\end_inset


\end_layout

\end_inset

 ist es möglich ein alternatives, vereinfachtes Data-Template anzugeben,
 das verwendet wird, während der Benutzer scrollt.
 So kann z.B.
 während des Scrollens nur der Name eines Films angezeigt werden und sobald
 die Liste anhält, zusätzlich ein Bild und weitere Informationen.
\end_layout

\begin_layout Subsubsection

\noun on
Tombstoning
\end_layout

\begin_layout Standard
Eine Konsequenz der geringen Ressourcen ist das so genannte 
\noun on
Tombstoning
\noun default
.
 WP7 unterstützt kein Multitasking
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Das OS selbst unterstützt Multitasking und ein zukünftiges Update soll es
 auch Apps zugänglich machen.
\end_layout

\end_inset

, wie man es auf dem Desktop gewöhnt ist.
 Stattdessen wird ein Programm, sobald es inaktiv wird, aus dem RAM entfernt.
 Bevor dies geschieht wird der App zuvor die Möglichkeit gegeben ihren Zustand
 zu sichern.
\end_layout

\begin_layout Standard
Dies geschieht an zwei Stellen:
\end_layout

\begin_layout Standard
Zum einen kann jede Seite lokale Daten halten.
 Da Seiten bei jedem Aufruf neu erstellt werden, müssen diese Daten, für
 eine eventuell später ausgeführte 
\begin_inset Quotes eld
\end_inset

Zurück
\begin_inset Quotes erd
\end_inset

 Navigation, bei jedem Verlassen gespeichert werden.
 Dies geschieht durch setzen eines 
\noun on
State
\noun default
 Dictionaries, auf welches der Navigationsservice Zugriff hat, der die Daten
 dann serialisiert.
 
\end_layout

\begin_layout Standard
Zum anderen kann die 
\emph on
App
\emph default
 Klasse globale Daten halten.
 Diese können entweder mit einer Dictionary basierten Methode gespeichert
 werden oder manuell auf dem normalen Dateisystem.
\end_layout

\begin_layout Standard
Wenn eine Anwendung oder eine Seite keinen inhärenten Zustand besitzt, ist
 die Verwendung dieser Methoden aber nicht verpflichtend.
 Sie werden dann einfach neu erstellt, wie bei ihrem ersten Aufruf.
\end_layout

\begin_layout Subsubsection
UI Design
\end_layout

\begin_layout Standard
Ein weiterer Aspekt, auf den hier aber nicht näher eingegangen werden soll,
 ist die Bauform.
 Durch sie bedingt steht sehr viel weniger Bildschirmfläche zur Verfügung,
 was u.U.
 ein komplett unterschiedliches Design nötig machen kann.
 Außerdem sind in diesem Bereich Eingabemethoden üblich, die auf dem Desktop
 oft gar nicht zur Verfügung stehen.
 (Z.B.
 Multi-Touch-Screens, Beschleunigungs- und Lagesensoren)
\end_layout

\begin_layout Subsection
Entwicklungsumgebung
\end_layout

\begin_layout Standard
Microsoft stellt sowohl 
\noun on
Visual Studio 2010
\noun default
 als auch 
\noun on
Expression Blend
\noun default
 in einer speziellen Version für WP7 kostenlos zur Verfügung.
 
\noun on
Visual Studio
\noun default
 richtet sich dabei an Entwickler und 
\noun on
Blend
\noun default
 an Designer.
 Aber prinzipiell könnte man beide Tools für die gesamte Entwicklung verwenden.
 
\end_layout

\begin_layout Standard
Über beide Tools könnte man ganze Bücher schreiben, was aber ganz klar den
 Rahmen dieser Arbeit sprengen würde.
 Allerdings gibt es einen Punkt den man als Entwickler für WP7 beachten
 muss:
\end_layout

\begin_layout Standard
Der Emulator der im WP7 SDK mitgeliefert wird, verhält sich nicht 100%ig
 wie ein echtes Gerät.
 Da der Emulator-Code auf x86 portiert wurde ist die Performance in machen
 Teilen besser, und in anderen Teilen schlechter.
 Manches Verhalten lässt sich nur auf einem von beiden reproduzieren und
 H.264 Videos können nur auf echten Geräten wiedergegeben werden.
\end_layout

\begin_layout Standard
Ein weiterer Punkt, der nirgends dokumentiert ist, und somit im Rahmen dieser
 Arbeit erstmals aufgedeckt wurde, ist ein Unterschied in den SSL Zertifikaten.
 Während auf dem Gerät alle üblichen Zertifikate installiert sind, fehlt
 auf dem Emulator zumindest das von 
\noun on
DigiCert
\noun default
.
 Das verursacht Verbindungsabbrüche an HTTPS-Verbindungen, die auch ohne
 wie auch immer geartete, hilfreiche Fehlermeldung eine Ausnahme werfen,
 falls ein entsprechendes Zertifikat verwendet wird.
\end_layout

\begin_layout Standard
Aus diesem Grund sollte man stets auf der Zielhardware testen - wobei möglichst
 mehr als nur ein Gerät verwendet werden sollte.
\end_layout

\begin_layout Section
Fazit - Erfolgschancen von WP7
\end_layout

\begin_layout Standard
Zum heutigen Tag hat der WP7 Marketplace über 17.000 Apps und mehr als 36.000
 Personen haben sich für das Entwicklerprogramm registriert.
\begin_inset CommandInset citation
LatexCommand cite
key "wp7stats"

\end_inset

 Seit einem Monat rollt Microsoft das erste große Update für WP7 aus.
 Dieses enthält 
\emph on
Copy&Paste
\emph default
 als auch viele Performance\SpecialChar \nobreakdash-
 und Stabilitäts\SpecialChar \nobreakdash-
Verbesserungen.
 Außerdem wurde das 
\begin_inset Quotes eld
\end_inset

Mango
\begin_inset Quotes erd
\end_inset

 Update vorgestellt, dass im Herbst für alle WP7 Geräte zur Verfügung stehen
 soll und endgültig mit Android und iOS in Sachen Funktionsumfang gleichziehen
 soll.
\end_layout

\begin_layout Standard
Ein weiterer Faktor, der die Zukunft von WP7 mit Sicherheit entscheidend
 beeinflussen wird, ist die Allianz mit Nokia, die diesen Monat endgültig
 beschlossen wurde.
 
\end_layout

\begin_layout Standard
Auch wenn Microsoft bis heute keine offiziellen Zahlen vorgelegt hat, wie
 viele 
\emph on
Geräte
\emph default
 tatsächlich verkauft wurden, sind diese Fakten ein starker Beleg dafür,
 dass sich WP7 noch lange am Markt halten wird.
\end_layout

\begin_layout Standard
Noch ist die größte Schwäche von WP7, dass es im Gegensatz zu Windows Mobile
 6.5 (heute 
\begin_inset Quotes eld
\end_inset

Windows Phone Classic
\begin_inset Quotes erd
\end_inset

) noch nicht für Geschäftskunden tauglich ist.
 Da der Business-Sektor traditionell Microsofts stärkster Geschäftsbereich
 ist, muss dieses Manko so schnell wie möglich beseitigt werden.
 Dann steht dem Erfolg von 
\emph on
Windows Phone 7
\emph default
 nichts mehr im Weg.
\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "HS-Refs"
options "bibtotoc,IEEEtran"

\end_inset


\end_layout

\end_body
\end_document
