#LyX 2.0.0beta3 created this file. For more info see http://www.lyx.org/
\lyxformat 410
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language ngerman
\inputencoding auto
\fontencoding global
\font_roman Cambria
\font_sans Calibri
\font_typewriter Consolas
\font_default_family default
\use_non_tex_fonts true
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement H
\paperfontsize default
\spacing other 1.2
\use_hyperref true
\pdf_title "Entwicklung auf Windows Phone 7"
\pdf_author "Martin Rauscher"
\pdf_keywords "Windows Phone 7, WP7, XAML, Silverlight, Microsoft"
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen true
\pdf_bookmarksopenlevel 1
\pdf_breaklinks true
\pdf_pdfborder true
\pdf_colorlinks true
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Entwicklung auf Windows Phone 7
\begin_inset Newline newline
\end_inset


\size large
Am Beispiel einer 
\noun on
OpenStreetMap
\noun default
 Anwendung
\end_layout

\begin_layout Author
Martin Rauscher
\end_layout

\begin_layout Section
Einführung
\end_layout

\begin_layout Standard
Laber laber laber
\end_layout

\begin_layout Subsection
Vorstellung der Beispielanwendung
\end_layout

\begin_layout Standard
Im Rahmen dieser Arbeit wurde eine Anwendung erstellt, die das Betrachten
 von Karten von 
\noun on
OpenStreetMap
\noun default
 (und anderen Anbietern) ermöglicht.
 Sie ermöglicht die Steuerung über die üblichen Multi-Touch-Gesten, das
 suchen nach Orten und das erstellen von Favoritenlisten.
 Desweiteren können Routen geplant werden.
\end_layout

\begin_layout Standard
Alle Beispiele in dieser Arbeit sind aus dem Code dieser Anwendung.
 Für nähere Informationen zur 
\begin_inset Quotes eld
\end_inset

OpenStreetApp
\begin_inset Quotes erd
\end_inset

 verweise ich auf XXXXX
\end_layout

\begin_layout Subsection
Rahmen dieser Arbeit
\end_layout

\begin_layout Standard
Um Anwendungen für WP7 zu schreiben gibt es grundsätzlich zwei Möglichkeiten
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Für spezielle Microsoft Partner ist es auch noch möglich halb-native Anwendungen
 zu schreiben.
\end_layout

\end_inset

:
\end_layout

\begin_layout Enumerate
Die Entwicklung auf Basis von Silverlight, wobei die Oberfläche in XAML
 geschrieben wird.
\end_layout

\begin_layout Enumerate
Das XNA Framework - eine gekapselte DirectX-Schnittstille - wird hauptsächlich
 für die Entwicklung von Spielen verwendet.
\end_layout

\begin_layout Standard
Diese Arbeit beschäftigt sich ausschließlich mit der Entwicklung mit Silverlight
, da das Entwicklungsmodell mit XNA gänzlich anders ist und es nur in seltenen
 Fällen Sinn macht mit XNA nicht-Spiele zu entwickeln.
\end_layout

\begin_layout Section
Eine kurze Geschichte der
\begin_inset Newline newline
\end_inset


\noun on
Windows
\begin_inset space ~
\end_inset

Presentation
\begin_inset space ~
\end_inset

Foundation
\end_layout

\begin_layout Standard
Das Framework auf WP7 Handys basiert auf dem - vom Desktop bekannten - Silverlig
ht, welches selbst wieder auf der 
\noun on
Windows Presentation Foundation
\noun default
 basiert.
 In den folgen Abschnitten soll kurz aufgezeigt werden, wie die beiden Framework
s entstanden sind und was die groben Unterschiede sind.
\end_layout

\begin_layout Subsection

\noun on
Windows Presentation Foundation (WPF)
\end_layout

\begin_layout Standard
Ende 2006 stellte Microsoft die finale Version 3.0 des .NET Framwork vor.
 Mit diesem wurde zum ersten mal die, bis dahin unter dem Codenamen Avalon
 entwickelte, 
\noun on
Windows Presentation Foundation (WPF)
\noun default
 der Öffentlichkeit zugänglich gemacht.
 Microsoft hoffte das Entwickler, insbesondere für das nur zwei Monate später
 erscheinende Windows Vista, nun hauptsächlich mit .NET und WPF entwickeln
 würden.
 Bis heute ist allerdings die Akzeptanz von WPF im Consumerbereich eher
 gering.
\end_layout

\begin_layout Standard
Mit WPF führte Microsoft erstmals ein deklaratives Modell zur Gestaltung
 von Benutzeroberflächen ein.
 Dabei wird die GUI und die Datenbindungen mit einem auf XML basierenden
 Format beschrieben.
 Dies erhöht die Wartbarkeit und Wiederverwendbarkeit verglichen mit den
 bisher verwendeten, zum Teil riesigen, automatisch generierten Funktionen
 enorm.
\end_layout

\begin_layout Standard
Eine weitere große Neuerung ist die Abwendung von GDI(+) für das GUI-Rendering.
 Mit WPF wird erstmals voll auf (hardwarebeschleunigtes) DirectX gesetzt.
 Das hat den Vorteil, dass komplexe Oberflächen gerendert, transformiert
 und mit Effekten versehen werden können, ohne dass die CPU zusätzlich belastet
 würde.
\end_layout

\begin_layout Subsection

\noun on
Silverlight 
\noun default
(WPF/E)
\end_layout

\begin_layout Standard
2007 stellte Microsoft 
\noun on
Silverlight
\noun default
 (unter dem Codenamen Windows 
\noun on
Presentation Foundation/Everywhere 
\noun default
(WPF/E) entwickelt) vor.
 Bei Silverlight handelt es sich grob gesagt um eine stark reduziert Version
 des .NET Framework und einer Untermenge
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Aufgrund von unterschiedlichen Releasezyklen hat die aktuelle WPF einige
 Klassen nicht, die in Silverlight enthalten sind.
 Dies wurden aber über ein Silverlight Toolkit nachgereicht.
\end_layout

\end_inset

 der WPF Funktionalität.
 
\end_layout

\begin_layout Standard
Auch wenn Silverlight oft als Konkurenz zu Adobes Flash Player gesehen wird,
 wurde es hauptsächlich mit dem Ziel entwickelt so genannte Rich Internet
 Applications (RIAs) zu ermöglichen, die hauptsächlich im Geschäftsbereich
 ihren Einsatzzweck haben.
 Der einzige Bereich in dem Silverlight momentan ernsthaft in direkter Konkurren
z zu Flash steht ist die Videowiedergabe.
 Sowohl 
\noun on
Smooth Streaming
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Bei Smooth Streaming handelt es sich um eine Technik die Videomaterial dynamisch
 neu kodiert, um sich der zur Verfügung stehenden Bandbreite anzupassen.
\end_layout

\end_inset


\noun default
 als auch hardwarebeschleunigte Videowiedergabe waren zuerst in Silverlight
 möglich.
\end_layout

\begin_layout Standard
Silverlight wurde vom Grund auf Plattformunabhängig konzipiert.
 Microsoft stellt es für die meisten Windows Versionen sowie für Mac OS
 X zur Verfügung.
 Desweiteren ist ein Großteil der Spezifikationen und einige Teile des Codes
 öffentlich zugänglich.
 Darauf aufbauend entwickelt das Mono Projekt unter Leitung von Novell einen
 Linux Port.
 
\begin_inset Quotes eld
\end_inset

Moonlight
\begin_inset Quotes erd
\end_inset

 ist momentan Kompatibel mit Silverlight 3.
\end_layout

\begin_layout Subsection
Unteschiede
\end_layout

\begin_layout Standard
Mit dem Ziel der Plattformunabhängigkeit gingen natürlich auch höhere Ansprüche
 an einen geringen Ressourcenverbrauch einher.
 Das hatte zur Folge, dass einige Funktionen - z.B.
 Hardwarebeschleunigung und einige Controls - erst in späteren Versionen
 zur Verfügung standen.
 Bis jetzt sind noch einige Konzepte, wie z.B.
 Trigger und implizite Styles, noch immer nur in WPF verfügbar.
\end_layout

\begin_layout Section
Entwicklen mit Silverlight
\end_layout

\begin_layout Subsection
XAML
\end_layout

\begin_layout Standard
XAML, bindings, MVVM etc
\end_layout

\begin_layout Standard
XAML ist eine deklarative Sprache zur Beschreibung von Benutzeroberflächen
 in Silverlight und WPF.
 Sie ist ein XML Dialekt, der um verschiedene Konzepte erweitert wurde:
\end_layout

\begin_layout Subsubsection
Komplexe Attributdefinitionen
\end_layout

\begin_layout Standard
In XML können Attributen nur Strings, Zahlen und Referenzen zugewiesen werden,
 während der Inhalt von Element beliebig komplex sein kann.
 In XAML können Attribute durch eine simple Erweiterung der Semantik von
 Elementnamen, ebenfalls beschrieben werden.
 Im Beispiel 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:Beispiel-für-Komplexe"

\end_inset

 wird so auf das Attribut 
\family typewriter
Background
\family default
 über 
\family typewriter
Grid.Background
\family default
 zugegriffen.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=HTML,tabsize=4"
inline false
status open

\begin_layout Plain Layout

<Grid x:Name="LayoutRoot" Background="Transparent"/>
\end_layout

\begin_layout Plain Layout

<!-- oder -->
\end_layout

\begin_layout Plain Layout

<Grid x:Name="LayoutRoot">
\end_layout

\begin_layout Plain Layout

	<Grid.Background>
\end_layout

\begin_layout Plain Layout

		<SolidColorBrush Color="Transparent"/>
\end_layout

\begin_layout Plain Layout

	</Grid.Background>
\end_layout

\begin_layout Plain Layout

</Grid>
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "alg:Beispiel-für-Komplexe"

\end_inset

Beispiel für Komplexe Attributdefinitionen
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Datenverbindungen
\end_layout

\begin_layout Subsection
Reactive Extensions (Rx)
\end_layout

\begin_layout Subsection
Besonderheiten auf dem Handy
\end_layout

\begin_layout Subsubsection
Performance
\end_layout

\begin_layout Standard
Die Entwicklung auf Mobilgeräten unterliegt zum Teil gänzlich anderen Anforderun
gen, als die Entwicklung für den Desktopbereich.
 Während auf 
\begin_inset Quotes eld
\end_inset

normalen
\begin_inset Quotes erd
\end_inset

 PCs sowohl Rechenleistung als auch Arbeitsspeicher im Übermaß vorhanden
 ist, müssen sich Entwickler im mobilen Bereich über diese Aspekte wieder
 Gedanken machen.
 Nur dann kann eine ausreichende Performance auf dem Gerät zu erzielt werden.
\end_layout

\begin_layout Standard
Beispiele im Vergleich WPF SL/WP7
\end_layout

\begin_layout Subsubsection

\noun on
Tombstoning
\end_layout

\begin_layout Standard
Eine Konsequenz der geringen Ressourcen ist das so genannte 
\noun on
Tombstoning
\noun default
.
 WP7 unterstützt kein Multitasking
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Das OS selbst unterstützt Multitasking und ein zukünftiges Update soll es
 auch Apps zugänglich machen.
\end_layout

\end_inset

, wie man es auf dem Desktop gewöhnt ist.
 Stattdessen wird ein Programm sobald es inaktiv wird aus dem RAM entfernt.
 Bevor dies geschieht wird der App zuvor die Möglichkeit gegeben ihren Zustand
 zu sichern.
\end_layout

\begin_layout Standard
Dies geschieht an zwei Stellen:
\end_layout

\begin_layout Standard
Zum einen kann jede Page lokale Daten halten.
 Da Pages bei jedem Aufruf neu erstellt werden, müssen diese Daten, für
 eine eventuell später ausgeführte 
\begin_inset Quotes eld
\end_inset

zurück
\begin_inset Quotes erd
\end_inset

 Navigation, bei jedem Verlassen gespeichert werden.
 Dies geschieht durch setzen eines 
\noun on
State
\noun default
 Dictionaries, auf das der Navigationsservice Zugriff hat.
 
\end_layout

\begin_layout Standard
Zum Anderen kann die 
\noun on
App
\noun default
 Klasse globale Daten halten.
 Diese können entweder auch mit einer Dictionary basierten Methode gespeichert
 werden, oder aber auch manuell mit dem normalen Dateisystem.
\end_layout

\begin_layout Standard
Wenn eine Anwendung oder eine Seite keinen inhärenten Zustand hat, ist die
 Verwendung dieser Methoden aber nicht verpflichtend.
 Sie werden dann einfach neu erstellt, wie beim ersten Aufruf.
\end_layout

\begin_layout Subsubsection
Design
\end_layout

\begin_layout Standard
Ein weiterer Aspekt, auf den hier aber nicht näher eingegangen werden soll,
 ist die Bauform.
 Durch sie bedingt steht sehr viel weniger Bildschirmfläche zur Verfügung,
 was u.U.
 ein Komplett unterschiedliches Design von Nöten machen kann.
 Außerdem sind in diesem Bereich Eingabemethoden üblich, die auf dem Desktop
 oft garnicht zur Verfügung stehen.
 (Z.B.
 Multi-Touch-Screens, Beschleunigungs- und Lagesensoren)
\end_layout

\begin_layout Section
Das Microsoft-Ökosystem
\end_layout

\begin_layout Subsection
Marketplace (aka App-Store™
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Apple hat 
\begin_inset Quotes eld
\end_inset

App-Store
\begin_inset Quotes erd
\end_inset

 als Markenzeichen eintragen lassen, wogegen Microsoft gerade Einspruch
 erhoben hat.
\end_layout

\end_inset

)
\end_layout

\begin_layout Subsection
Entwicklungsumgebung
\end_layout

\begin_layout Section
Fazit - Erfolgschancen von WP7
\end_layout

\begin_layout Bibliography
\labelwidthstring Literaturverzeichnis
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-1"

\end_inset

Erste Quelleden
\end_layout

\end_body
\end_document
